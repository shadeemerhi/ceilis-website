generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  date           String
  time           String
  name           String
  email          String
  phone          String
  numberOfGuests String
  status         ReservationStatus
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  DECLINED
}

model FoodItem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  additions   Addition[]
  sizes       Addition[]
  categoryId  String       @db.ObjectId
  category    FoodCategory @relation(fields: [categoryId], references: [id])
}

model FoodCategory {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  substitutions Addition[]
  additions     Addition[]
  items         FoodItem[]
}

type Addition {
  name  String
  price Float?
}

model BeerItem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String?
  style       String?
  description String?
  price       Float
  sizes       Addition[]
  category    BeerCategory @relation(fields: [categoryId], references: [id])
  categoryId  String       @db.ObjectId
}

model BeerCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  sizes       Addition[]
  items       BeerItem[]
}

model WineItem {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  location    String?
  sizes       Addition[]
  categoryId  String       @db.ObjectId
  category    WineCategory @relation(fields: [categoryId], references: [id])
}

model WineCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  items       WineItem[]
}

model SpiritItem {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String?
  sizes       Addition[]
  categoryId  String         @db.ObjectId
  category    SpiritCategory @relation(fields: [categoryId], references: [id])
}

model SpiritCategory {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  items SpiritItem[]
}
